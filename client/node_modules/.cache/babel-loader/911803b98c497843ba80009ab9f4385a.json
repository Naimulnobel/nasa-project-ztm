{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { httpGetLaunches, httpSubmitLaunch, httpAbortLaunch } from './requests';\n\nfunction useLaunches(onSuccessSound, onAbortSound, onFailureSound) {\n  _s();\n\n  const [launches, saveLaunches] = useState([]);\n  const [isPendingLaunch, setPendingLaunch] = useState(false);\n  const getLaunches = useCallback(async () => {\n    const fetchedLaunches = await httpGetLaunches();\n    saveLaunches(fetchedLaunches);\n  }, []);\n  useEffect(() => {\n    getLaunches();\n  }, [getLaunches]);\n  const submitLaunch = useCallback(async e => {\n    e.preventDefault(); // setPendingLaunch(true);\n\n    const data = new FormData(e.target);\n    const launchDate = new Date(data.get(\"launch-day\"));\n    const mission = data.get(\"mission-name\");\n    const rocket = data.get(\"rocket-name\");\n    const target = data.get(\"planets-selector\");\n    const response = await httpSubmitLaunch({\n      launchDate,\n      mission,\n      rocket,\n      target\n    }); // TODO: Set success based on response.\n\n    const success = false;\n\n    if (success) {\n      getLaunches();\n      setTimeout(() => {\n        setPendingLaunch(false);\n        onSuccessSound();\n      }, 800);\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onSuccessSound, onFailureSound]);\n  const abortLaunch = useCallback(async id => {\n    const response = await httpAbortLaunch(id); // TODO: Set success based on response.\n\n    const success = false;\n\n    if (success) {\n      getLaunches();\n      onAbortSound();\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onAbortSound, onFailureSound]);\n  return {\n    launches,\n    isPendingLaunch,\n    submitLaunch,\n    abortLaunch\n  };\n}\n\n_s(useLaunches, \"8KpHIIq7AzMRt3raNpddjI+KYXY=\");\n\nexport default useLaunches;","map":{"version":3,"sources":["/home/nobel/Documents/nasa-project/client/src/hooks/useLaunches.js"],"names":["useCallback","useEffect","useState","httpGetLaunches","httpSubmitLaunch","httpAbortLaunch","useLaunches","onSuccessSound","onAbortSound","onFailureSound","launches","saveLaunches","isPendingLaunch","setPendingLaunch","getLaunches","fetchedLaunches","submitLaunch","e","preventDefault","data","FormData","target","launchDate","Date","get","mission","rocket","response","success","setTimeout","abortLaunch","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SACEC,eADF,EAEEC,gBAFF,EAGEC,eAHF,QAIO,YAJP;;AAMA,SAASC,WAAT,CAAqBC,cAArB,EAAqCC,YAArC,EAAmDC,cAAnD,EAAmE;AAAA;;AACjE,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BT,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACU,eAAD,EAAkBC,gBAAlB,IAAsCX,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAMY,WAAW,GAAGd,WAAW,CAAC,YAAY;AAC1C,UAAMe,eAAe,GAAG,MAAMZ,eAAe,EAA7C;AACAQ,IAAAA,YAAY,CAACI,eAAD,CAAZ;AACD,GAH8B,EAG5B,EAH4B,CAA/B;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAME,YAAY,GAAGhB,WAAW,CAAC,MAAOiB,CAAP,IAAa;AAC5CA,IAAAA,CAAC,CAACC,cAAF,GAD4C,CAE5C;;AACA,UAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,CAAC,CAACI,MAAf,CAAb;AACA,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASJ,IAAI,CAACK,GAAL,CAAS,YAAT,CAAT,CAAnB;AACA,UAAMC,OAAO,GAAGN,IAAI,CAACK,GAAL,CAAS,cAAT,CAAhB;AACA,UAAME,MAAM,GAAGP,IAAI,CAACK,GAAL,CAAS,aAAT,CAAf;AACA,UAAMH,MAAM,GAAGF,IAAI,CAACK,GAAL,CAAS,kBAAT,CAAf;AACA,UAAMG,QAAQ,GAAG,MAAMvB,gBAAgB,CAAC;AACtCkB,MAAAA,UADsC;AAEtCG,MAAAA,OAFsC;AAGtCC,MAAAA,MAHsC;AAItCL,MAAAA;AAJsC,KAAD,CAAvC,CAR4C,CAe5C;;AACA,UAAMO,OAAO,GAAG,KAAhB;;AACA,QAAIA,OAAJ,EAAa;AACXd,MAAAA,WAAW;AACXe,MAAAA,UAAU,CAAC,MAAM;AACfhB,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAN,QAAAA,cAAc;AACf,OAHS,EAGP,GAHO,CAAV;AAID,KAND,MAMO;AACLE,MAAAA,cAAc;AACf;AACF,GA1B+B,EA0B7B,CAACK,WAAD,EAAcP,cAAd,EAA8BE,cAA9B,CA1B6B,CAAhC;AA4BA,QAAMqB,WAAW,GAAG9B,WAAW,CAAC,MAAO+B,EAAP,IAAc;AAC5C,UAAMJ,QAAQ,GAAG,MAAMtB,eAAe,CAAC0B,EAAD,CAAtC,CAD4C,CAG5C;;AACA,UAAMH,OAAO,GAAG,KAAhB;;AACA,QAAIA,OAAJ,EAAa;AACXd,MAAAA,WAAW;AACXN,MAAAA,YAAY;AACb,KAHD,MAGO;AACLC,MAAAA,cAAc;AACf;AACF,GAX8B,EAW5B,CAACK,WAAD,EAAcN,YAAd,EAA4BC,cAA5B,CAX4B,CAA/B;AAaA,SAAO;AACLC,IAAAA,QADK;AAELE,IAAAA,eAFK;AAGLI,IAAAA,YAHK;AAILc,IAAAA;AAJK,GAAP;AAMD;;GA5DQxB,W;;AA8DT,eAAeA,WAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n} from './requests';\n\nfunction useLaunches(onSuccessSound, onAbortSound, onFailureSound) {\n  const [launches, saveLaunches] = useState([]);\n  const [isPendingLaunch, setPendingLaunch] = useState(false);\n\n  const getLaunches = useCallback(async () => {\n    const fetchedLaunches = await httpGetLaunches();\n    saveLaunches(fetchedLaunches);\n  }, []);\n\n  useEffect(() => {\n    getLaunches();\n  }, [getLaunches]);\n\n  const submitLaunch = useCallback(async (e) => {\n    e.preventDefault();\n    // setPendingLaunch(true);\n    const data = new FormData(e.target);\n    const launchDate = new Date(data.get(\"launch-day\"));\n    const mission = data.get(\"mission-name\");\n    const rocket = data.get(\"rocket-name\");\n    const target = data.get(\"planets-selector\");\n    const response = await httpSubmitLaunch({\n      launchDate,\n      mission,\n      rocket,\n      target,\n    });\n\n    // TODO: Set success based on response.\n    const success = false;\n    if (success) {\n      getLaunches();\n      setTimeout(() => {\n        setPendingLaunch(false);\n        onSuccessSound();\n      }, 800);\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onSuccessSound, onFailureSound]);\n\n  const abortLaunch = useCallback(async (id) => {\n    const response = await httpAbortLaunch(id);\n\n    // TODO: Set success based on response.\n    const success = false;\n    if (success) {\n      getLaunches();\n      onAbortSound();\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onAbortSound, onFailureSound]);\n\n  return {\n    launches,\n    isPendingLaunch,\n    submitLaunch,\n    abortLaunch,\n  };\n}\n\nexport default useLaunches;"]},"metadata":{},"sourceType":"module"}